apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'liberty'

group 'org.ningning.sandbox'
version '0.0.2-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// build script
buildscript {
    repositories {
        mavenCentral()
        maven {
            name = 'Sonatype Nexus Snapshots'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
    dependencies {
        classpath 'io.openliberty.tools:liberty-gradle-plugin:3.0-SNAPSHOT'
    }
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {

    compile 'com.google.guava:guava:28.1-jre'
    compile 'org.apache.commons:commons-math3:3.6.1'

    // JEE runtimes
    providedCompile group: 'javax', name: 'javaee-api', version: '8.0.1'
    providedCompile group: 'javax.faces', name: 'javax.faces-api', version: '2.3'
    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version:'4.0.1'
    compile group: 'org.primefaces', name: 'primefaces', version: '7.0'
    
    //testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '[5.6.0,)'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '[5.6.0,)'
    testCompile group: 'org.apache.httpcomponents', name: 'httpclient', version: '[4.5.11,)'

    // The server
    libertyRuntime group: 'io.openliberty', name: 'openliberty-runtime', version: '[20.0.0.1,)'
}


test {
    useJUnitPlatform()
}

ext {
    appName = project.name
    testServerHttpPort = 9080
    testServerHttpsPort = 9443
    //warContext = appName
    warContext = 'cwgenJsf'
}

println '################## project path: ################'
println "Root project:   ${project.rootProject}"
println "  rootDir:      ${project.rootDir}"
println "  projectDir:   ${project.projectDir}"


// liberty server configs
liberty {
    server {
        //name = "${appName}Server"
        name = 'defaultServer'
        serverXmlFile = file("src/main/liberty/config/server.xml")
        looseApplication = true
        bootstrapProperties = ['default.http.port' : testServerHttpPort,
                               'default.https.port': testServerHttpsPort,
                               'app.context.root'  : warContext]
        packageLiberty {
            //packageName = "$buildDir/${appName}.zip"
            include = "usr"
        }
    }
}

// copy the dictionary file from main resources to web resources

//war {
//    archiveName = "${baseName}.${extension}"
//}

test {
    reports.html.destination = file("$buildDir/reports/unit")
    reports.junitXml.destination = file("$buildDir/test-results/unit")
    exclude '**/it/**'
}

task integrationTest(type: Test) {
    group 'Verification'
    description 'Runs the integration tests.'
    reports.html.destination = file("$buildDir/reports/it")
    reports.junitXml.destination = file("$buildDir/test-results/it")
    include '**/it/**'
    exclude '**/unit/**'

    systemProperties = ['liberty.test.port': testServerHttpPort, 'war.name': warContext]
}

task openBrowser {
    description = 'Open browser to http://localhost:9080/${warContext}'
    doLast {
        java.awt.Desktop.desktop.browse "http://localhost:${testServerHttpPort}/${appName}".toURI()
    }
}

task openTestReport {
    description = 'Open browser to the test report'
    doLast {
        java.awt.Desktop.desktop.browse file("$buildDir/reports/it/index.html").toURI()
    }
}

clean.dependsOn 'libertyStop'
check.dependsOn 'integrationTest'
integrationTest.dependsOn 'libertyStart'
integrationTest.finalizedBy 'libertyStop'
integrationTest.finalizedBy 'openTestReport'
libertyPackage.dependsOn 'libertyStop'